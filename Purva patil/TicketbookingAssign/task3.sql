---- Task 3: Aggregate functions, Having, Order By, GroupBy and Joins

-- 1. List Events and Their Average Ticket Prices
SELECT event_name, AVG(ticket_price) AS average_ticket_price
FROM Event
GROUP BY event_name;

-- 2. Calculate the Total Revenue Generated by Events
SELECT event_id, SUM(total_cost) AS total_revenue
FROM Booking
GROUP BY event_id;

-- 3. Find the event with the highest ticket sales
SELECT TOP 1 e.event_name, SUM(b.num_tickets) AS total_tickets_sold
FROM Event e
JOIN Booking b ON e.event_id = b.event_id
GROUP BY e.event_name -- Changed from e.event_id to e.event_name
ORDER BY total_tickets_sold DESC;

-- 4. Calculate the Total Number of Tickets Sold for Each Event
SELECT e.event_name, SUM(b.num_tickets) AS total_tickets_sold
FROM Event e
JOIN Booking b ON e.event_id = b.event_id
GROUP BY e.event_name; -- Added e.event_name here

-- 5. Find Events with No Ticket Sales
SELECT e.event_name
FROM Event e
LEFT JOIN Booking b ON e.event_id = b.event_id
WHERE b.event_id IS NULL;

-- 6. Find the User Who Has Booked the Most Tickets
SELECT TOP 1 c.customer_name, SUM(b.num_tickets) AS total_tickets
FROM Customer c
JOIN Booking b ON c.customer_id = b.customer_id
GROUP BY c.customer_name -- Changed from c.customer_id to c.customer_name
ORDER BY total_tickets DESC;

-- 7. List Events and the total number of tickets sold for each month
SELECT MONTH(e.event_date) AS event_month, SUM(b.num_tickets) AS total_tickets
FROM Event e
JOIN Booking b ON e.event_id = b.event_id
GROUP BY MONTH(e.event_date);

-- 8. Calculate the average Ticket Price for Events in Each Venue
SELECT v.venue_name, AVG(e.ticket_price) AS average_ticket_price
FROM Venue v
JOIN Event e ON v.venue_id = e.venue_id
GROUP BY v.venue_name;

-- 9. Calculate the total Number of Tickets Sold for Each Event Type
SELECT event_type, SUM(b.num_tickets) AS total_tickets
FROM Event e
JOIN Booking b ON e.event_id = b.event_id
GROUP BY event_type;

-- 10. Calculate the total Revenue Generated by Events in Each Year
SELECT YEAR(event_date) AS event_year, SUM(b.total_cost) AS total_revenue
FROM Booking b
JOIN Event e ON b.event_id = e.event_id
GROUP BY YEAR(event_date);

-- 11. List users who have booked tickets for multiple events
SELECT c.customer_name, COUNT(DISTINCT b.event_id) AS total_events
FROM Customer c
JOIN Booking b ON c.customer_id = b.customer_id
GROUP BY c.customer_name
HAVING COUNT(DISTINCT b.event_id) > 1;

-- 12. Calculate the Total Revenue Generated by Events for Each User
SELECT c.customer_name, SUM(b.total_cost) AS total_revenue
FROM Customer c
JOIN Booking b ON c.customer_id = b.customer_id
GROUP BY c.customer_name;

-- 13. Calculate the Average Ticket Price for Events in Each Category and Venue
SELECT e.event_type, v.venue_name, AVG(e.ticket_price) AS average_ticket_price
FROM Event e
JOIN Venue v ON e.venue_id = v.venue_id
GROUP BY e.event_type, v.venue_name;

-- 14. List Users and the Total Number of Tickets They've Purchased in the Last 30 Days
SELECT c.customer_name, SUM(b.num_tickets) AS total_tickets
FROM Customer c
JOIN Booking b ON c.customer_id = b.customer_id
WHERE b.booking_date >= DATEADD(DAY, -30, GETDATE())
GROUP BY c.customer_name;
